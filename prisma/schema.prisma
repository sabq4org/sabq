generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String           @id @default(cuid())
  email             String           @unique
  passwordHash      String?          @map("password_hash")
  name              String?
  avatar            String?
  role              String           @default("user")
  isAdmin           Boolean          @default(false) @map("is_admin")
  isVerified        Boolean          @default(false) @map("is_verified")
  verificationToken String?          @map("verification_token")
  resetToken        String?          @map("reset_token")
  resetTokenExpiry  DateTime?        @map("reset_token_expiry")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  activityLogs      ActivityLog[]
  articles          Article[]
  comments          Comment[]
  interactions      Interaction[]
  loyaltyPoints     LoyaltyPoint[]
  sentMessages      Message[]        @relation("SentMessages")
  receivedMessages  Message[]        @relation("ReceivedMessages")
  preferences       UserPreference[]
  userRoles         UserRole[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Category {
  id           String     @id @default(cuid())
  name         String     @unique
  slug         String     @unique
  description  String?
  displayOrder Int        @default(0) @map("display_order")
  isActive     Boolean    @default(true) @map("is_active")
  color        String?    @db.VarChar(50)
  icon         String?    @db.VarChar(50)
  metadata     Json?
  nameEn       String?    @map("name_en")
  parentId     String?    @map("parent_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  articles     Article[]
  parent       Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Category[] @relation("CategoryHierarchy")

  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

model Keyword {
  id        String           @id @default(cuid())
  name      String           @unique
  slug      String           @unique
  count     Int              @default(0)
  createdAt DateTime         @default(now()) @map("created_at")
  articles  ArticleKeyword[]

  @@index([slug])
  @@map("keywords")
}

model Article {
  id             String           @id @default(cuid())
  title          String           @db.VarChar(500)
  slug           String           @unique @db.VarChar(500)
  content        String
  excerpt        String?
  authorId       String           @map("author_id")
  categoryId     String?          @map("category_id")
  status         String           @default("draft")
  featured       Boolean          @default(false)
  breaking       Boolean          @default(false)
  featuredImage  String?          @map("featured_image")
  publishedAt    DateTime?        @map("published_at")
  scheduledFor   DateTime?        @map("scheduled_for")
  views          Int              @default(0)
  readingTime    Int?             @map("reading_time")
  seoTitle       String?          @map("seo_title")
  seoDescription String?          @map("seo_description")
  seoKeywords    String?          @map("seo_keywords")
  socialImage    String?          @map("social_image")
  allowComments  Boolean          @default(true) @map("allow_comments")
  metadata       Json?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  keywords       ArticleKeyword[]
  author         User             @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category       Category?        @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments       Comment[]
  deepAnalysis   DeepAnalysis?
  interactions   Interaction[]

  @@index([slug])
  @@index([authorId])
  @@index([categoryId])
  @@index([status, publishedAt])
  @@map("articles")
}

model Interaction {
  id        String          @id @default(cuid())
  userId    String          @map("user_id")
  articleId String          @map("article_id")
  type      InteractionType
  createdAt DateTime        @default(now()) @map("created_at")
  article   Article         @relation(fields: [articleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, articleId, type])
  @@index([userId])
  @@index([articleId])
  @@map("interactions")
}

model LoyaltyPoint {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  points        Int
  action        String   @db.VarChar(100)
  referenceId   String?  @map("reference_id")
  referenceType String?  @map("reference_type")
  metadata      Json?
  createdAt     DateTime @default(now()) @map("created_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@map("loyalty_points")
}

model DeepAnalysis {
  id                 String   @id @default(cuid())
  articleId          String   @unique @map("article_id")
  aiSummary          String?  @map("ai_summary")
  keyTopics          Json?    @map("key_topics")
  tags               Json?
  sentiment          String?
  readabilityScore   Decimal? @map("readability_score") @db.Decimal(5, 2)
  engagementScore    Int?     @map("engagement_score")
  suggestedHeadlines Json?    @map("suggested_headlines")
  relatedArticles    Json?    @map("related_articles")
  metadata           Json?
  analyzedAt         DateTime @default(now()) @map("analyzed_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  article            Article  @relation(fields: [articleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([articleId])
  @@map("deep_analyses")
}

model ArticleKeyword {
  id        String   @id @default(cuid())
  articleId String   @map("article_id")
  keywordId String   @map("keyword_id")
  createdAt DateTime @default(now()) @map("created_at")
  article   Article  @relation(fields: [articleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  keyword   Keyword  @relation(fields: [keywordId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([articleId, keywordId])
  @@index([articleId])
  @@index([keywordId])
  @@map("article_keywords")
}

model Message {
  id           String    @id @default(cuid())
  fromUserId   String?   @map("from_user_id")
  toUserId     String?   @map("to_user_id")
  email        String
  subject      String?   @db.VarChar(500)
  message      String
  status       String    @default("unread")
  repliedAt    DateTime? @map("replied_at")
  replyContent String?   @map("reply_content")
  metadata     Json?
  createdAt    DateTime  @default(now()) @map("created_at")
  fromUser     User?     @relation("SentMessages", fields: [fromUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  toUser       User?     @relation("ReceivedMessages", fields: [toUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([status])
  @@index([fromUserId])
  @@index([toUserId])
  @@map("messages")
}

model ActivityLog {
  id         String   @id @default(cuid())
  userId     String?  @map("user_id")
  action     String
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  oldValue   Json?    @map("old_value")
  newValue   Json?    @map("new_value")
  metadata   Json?
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([action])
  @@index([entityType, entityId])
  @@map("activity_logs")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique @db.VarChar(100)
  slug        String?    @unique
  displayName String?    @map("display_name")
  description String?
  permissions Json?
  isSystem    Boolean    @default(false) @map("is_system")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  roleId    String    @map("role_id")
  grantedBy String?   @map("granted_by")
  grantedAt DateTime  @default(now()) @map("granted_at")
  expiresAt DateTime? @map("expires_at")
  role      Role      @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

model UserPreference {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  key       String
  value     Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, key])
  @@index([userId])
  @@map("user_preferences")
}

model Comment {
  id        String    @id @default(cuid())
  articleId String    @map("article_id")
  userId    String?   @map("user_id")
  parentId  String?   @map("parent_id")
  content   String
  status    String    @default("pending")
  likes     Int       @default(0)
  metadata  Json?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  article   Article   @relation(fields: [articleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentReplies")
  user      User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([articleId])
  @@index([userId])
  @@index([parentId])
  @@index([status])
  @@map("comments")
}

model AnalyticsData {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  metricName  String   @map("metric_name") @db.VarChar(100)
  metricValue Decimal  @map("metric_value") @db.Decimal(15, 2)
  dimensions  Json?
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")

  @@unique([date, metricName])
  @@index([date])
  @@index([metricName])
  @@map("analytics_data")
}

model SiteSettings {
  id        String   @id @default(cuid())
  section   String   @unique @db.VarChar(50)
  data      Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([section])
  @@map("site_settings")
}

model daily_doses {
  id          String             @id
  period      daily_doses_period
  title       String             @db.VarChar(500)
  subtitle    String             @db.VarChar(500)
  date        DateTime           @db.Date
  status      daily_doses_status @default(draft)
  publishedAt DateTime?
  views       Int                @default(0)
  metadata    Json?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime

  @@unique([date, period])
  @@index([date])
  @@index([period])
  @@index([status])
}

model dose_contents {
  id           String                    @id
  doseId       String
  articleId    String?
  contentType  dose_contents_contentType
  title        String                    @db.VarChar(500)
  summary      String
  audioUrl     String?
  imageUrl     String?
  displayOrder Int                       @default(0)
  metadata     Json?
  createdAt    DateTime                  @default(now())

  @@index([articleId])
  @@index([doseId])
}

model forum_badges {
  id           String    @id @default(cuid())
  name         String    @db.VarChar(255)
  name_ar      String    @db.VarChar(255)
  description  String?
  icon         String?   @db.VarChar(50)
  color        String?   @db.VarChar(50)
  requirements Json?
  points       Int?      @default(0)
  is_active    Boolean?  @default(true)
  created_at   DateTime? @default(now())
  updated_at   DateTime? @default(now())
}

model forum_categories {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(255)
  name_ar       String    @db.VarChar(255)
  slug          String    @unique(map: "slug") @db.VarChar(255)
  description   String?
  icon          String?   @db.VarChar(50)
  color         String?   @db.VarChar(50)
  display_order Int?      @default(0)
  is_active     Boolean?  @default(true)
  created_at    DateTime? @default(now())
  updated_at    DateTime? @default(now())

  @@index([display_order], map: "idx_order")
  @@index([slug], map: "idx_slug")
}

model forum_follows {
  id          String                    @id @default(cuid())
  user_id     String
  target_type forum_follows_target_type
  target_id   String
  created_at  DateTime?                 @default(now())

  @@unique([user_id, target_type, target_id], map: "unique_follow")
  @@index([target_type, target_id], map: "idx_forum_follows_target")
  @@index([user_id], map: "idx_forum_follows_user")
}

model forum_notifications {
  id          String    @id @default(cuid())
  user_id     String
  type        String    @db.VarChar(50)
  target_type String?   @db.VarChar(50)
  target_id   String?
  data        Json?
  is_read     Boolean?  @default(false)
  created_at  DateTime? @default(now())

  @@index([created_at], map: "idx_forum_notifications_created")
  @@index([user_id, is_read], map: "idx_user_unread")
}

model forum_replies {
  id          String                @id @default(cuid())
  topic_id    String
  parent_id   String?
  author_id   String
  content     String
  is_accepted Boolean?              @default(false)
  status      forum_replies_status? @default(active)
  edited_at   DateTime?
  edited_by   String?
  created_at  DateTime?             @default(now())
  updated_at  DateTime?             @default(now())

  @@index([author_id], map: "idx_forum_replies_author")
  @@index([created_at], map: "idx_forum_replies_created")
  @@index([parent_id], map: "idx_parent")
  @@index([topic_id], map: "idx_topic")
}

model forum_reports {
  id          String                    @id @default(cuid())
  reporter_id String
  target_type forum_reports_target_type
  target_id   String
  reason      String                    @db.VarChar(255)
  description String?
  status      forum_reports_status?     @default(pending)
  resolved_by String?
  resolved_at DateTime?
  created_at  DateTime?                 @default(now())

  @@index([reporter_id], map: "idx_reporter")
  @@index([status], map: "idx_status")
  @@index([target_type, target_id], map: "idx_forum_reports_target")
}

model forum_reputation {
  id          String    @id @default(cuid())
  user_id     String
  points      Int?      @default(0)
  action_type String    @db.VarChar(50)
  target_type String?   @db.VarChar(50)
  target_id   String?
  description String?
  created_at  DateTime? @default(now())

  @@index([created_at], map: "idx_forum_reputation_created")
  @@index([user_id], map: "idx_forum_reputation_user")
}

model forum_topics {
  id            String               @id @default(cuid())
  title         String               @db.VarChar(500)
  content       String
  author_id     String
  category_id   String
  is_pinned     Boolean?             @default(false)
  is_locked     Boolean?             @default(false)
  is_featured   Boolean?             @default(false)
  status        forum_topics_status? @default(active)
  views         Int?                 @default(0)
  last_reply_at DateTime?
  last_reply_by String?
  created_at    DateTime?            @default(now())
  updated_at    DateTime?            @default(now())

  @@index([author_id], map: "idx_forum_topics_author")
  @@index([category_id], map: "idx_category")
  @@index([last_reply_at], map: "idx_last_reply")
  @@index([status, created_at], map: "idx_status_created")
}

model forum_user_badges {
  id        String    @id @default(cuid())
  user_id   String
  badge_id  String
  earned_at DateTime? @default(now())

  @@unique([user_id, badge_id], map: "unique_user_badge")
  @@index([badge_id], map: "idx_badge")
  @@index([user_id], map: "idx_forum_user_badges_user")
}

model forum_votes {
  id          String                  @id @default(cuid())
  user_id     String
  target_type forum_votes_target_type
  target_id   String
  vote_type   forum_votes_vote_type
  created_at  DateTime?               @default(now())

  @@unique([user_id, target_type, target_id], map: "unique_vote")
  @@index([target_type, target_id], map: "idx_forum_votes_target")
  @@index([user_id], map: "idx_forum_votes_user")
}

model Subscriber {
  id          String           @id @default(cuid())
  email       String           @unique
  name        String?          @db.VarChar(255)
  status      SubscriberStatus @default(active)
  preferences Json?
  metadata    Json?
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  emailLogs   EmailLog[]
}

model EmailTemplate {
  id          String     @id @default(cuid())
  name        String     @db.VarChar(255)
  subject     String     @db.VarChar(500)
  htmlContent String     @map("html_content")
  textContent String?    @map("text_content")
  metadata    Json?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  emailJobs   EmailJob[]
}

model EmailJob {
  id           String         @id @default(cuid())
  templateId   String?        @map("template_id")
  scheduledAt  DateTime?      @map("scheduled_at")
  startedAt    DateTime?      @map("started_at")
  completedAt  DateTime?      @map("completed_at")
  status       EmailJobStatus @default(queued)
  targetFilter Json?          @map("target_filter")
  metadata     Json?
  stats        Json?
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  template     EmailTemplate? @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  emailLogs    EmailLog[]

  @@index([status, scheduledAt])
}

model EmailLog {
  id             String         @id @default(cuid())
  jobId          String?        @map("job_id")
  subscriberId   String         @map("subscriber_id")
  providerMsgId  String?        @map("provider_msg_id")
  messageId      String?        @map("message_id")
  status         EmailLogStatus @default(pending)
  error          String?
  openedAt       DateTime?      @map("opened_at")
  clickedAt      DateTime?      @map("clicked_at")
  unsubscribedAt DateTime?      @map("unsubscribed_at")
  meta           Json?
  eventAt        DateTime       @default(now()) @map("event_at")
  job            EmailJob?      @relation(fields: [jobId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscriber     Subscriber     @relation(fields: [subscriberId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([subscriberId])
  @@index([status])
}

model EmailProviderConfig {
  id             String            @id @default(cuid())
  type           EmailProviderType @default(smtp)
  senderName     String            @map("sender_name") @db.VarChar(255)
  senderEmail    String            @map("sender_email") @db.VarChar(255)
  apiKey         String?           @map("api_key")
  host           String?           @db.VarChar(255)
  port           Int?
  username       String?           @db.VarChar(255)
  password       String?
  footerHtml     String?           @map("footer_html")
  unsubscribeUrl String?           @map("unsubscribe_url") @db.VarChar(500)
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
}

enum InteractionType {
  like
  save
  share
  comment
  view
}

enum daily_doses_period {
  morning
  afternoon
  evening
  night
}

enum dose_contents_contentType {
  article
  weather
  quote
  tip
  audio
  analysis
}

enum daily_doses_status {
  draft
  published
  scheduled
  archived
}

enum forum_follows_target_type {
  topic
  user
  category
}

enum forum_reports_target_type {
  topic
  reply
}

enum forum_votes_target_type {
  topic
  reply
}

enum forum_votes_vote_type {
  like
  dislike
}

enum forum_replies_status {
  active
  pending
  hidden
  deleted
}

enum forum_reports_status {
  pending
  resolved
  dismissed
}

enum forum_topics_status {
  active
  pending
  hidden
  deleted
}

enum SubscriberStatus {
  active
  inactive
  unsubscribed
}

enum EmailProviderType {
  smtp
  sendgrid
  mailgun
  ses
}

enum EmailJobStatus {
  queued
  sending
  completed
  cancelled
  failed
}

enum EmailLogStatus {
  pending
  sent
  delivered
  bounced
  opened
  clicked
  unsubscribed
  failed
}
