generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                String           @id @default(uuid())
  email             String           @unique
  passwordHash      String?          @map("password_hash")
  name              String?
  avatar            String?          @db.Text
  role              String           @default("user")
  isAdmin           Boolean          @default(false) @map("is_admin")
  isVerified        Boolean          @default(false) @map("is_verified")
  verificationToken String?          @map("verification_token")
  resetToken        String?          @map("reset_token")
  resetTokenExpiry  DateTime?        @map("reset_token_expiry")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  articles          Article[]
  interactions      Interaction[]
  activityLogs      ActivityLog[]
  sentMessages      Message[]        @relation("SentMessages")
  receivedMessages  Message[]        @relation("ReceivedMessages")
  loyaltyPoints     LoyaltyPoint[]
  preferences       UserPreference[]
  userRoles         UserRole[]
  comments          Comment[]
  commentReactions  CommentReaction[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Category {
  id           String     @id @default(uuid())
  name         String     @unique
  slug         String     @unique
  description  String?    @db.Text
  displayOrder Int        @default(0) @map("display_order")
  isActive     Boolean    @default(true) @map("is_active")
  parentId     String?    @map("parent_id")
  color        String?    @db.VarChar(7)
  icon         String?    @db.VarChar(50)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  parent       Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Category[] @relation("CategoryHierarchy")
  articles     Article[]

  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

model Keyword {
  id        String           @id @default(uuid())
  name      String           @unique
  slug      String           @unique
  count     Int              @default(0)
  createdAt DateTime         @default(now()) @map("created_at")
  articles  ArticleKeyword[]

  @@index([slug])
  @@map("keywords")
}

model Article {
  id             String           @id @default(uuid())
  title          String           @db.VarChar(500)
  slug           String           @unique @db.VarChar(500)
  content        String           @db.Text
  excerpt        String?          @db.Text
  authorId       String           @map("author_id")
  categoryId     String?          @map("category_id")
  status         String           @default("draft")
  featured       Boolean          @default(false)
  breaking       Boolean          @default(false)
  featuredImage  String?          @map("featured_image") @db.Text
  publishedAt    DateTime?        @map("published_at")
  scheduledFor   DateTime?        @map("scheduled_for")
  views          Int              @default(0)
  readingTime    Int?             @map("reading_time")
  seoTitle       String?          @map("seo_title")
  seoDescription String?          @map("seo_description")
  seoKeywords    String?          @map("seo_keywords")
  socialImage    String?          @map("social_image")
  allowComments  Boolean          @default(true) @map("allow_comments")
  commentSettings Json?           @map("comment_settings")
  metadata       Json?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  author         User             @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category       Category?        @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interactions   Interaction[]
  deepAnalysis   DeepAnalysis?
  keywords       ArticleKeyword[]
  comments       Comment[]

  @@index([slug])
  @@index([authorId])
  @@index([categoryId])
  @@index([status, publishedAt])
  @@map("articles")
}

model Interaction {
  id        String          @id @default(uuid())
  userId    String          @map("user_id")
  articleId String          @map("article_id")
  type      InteractionType
  createdAt DateTime        @default(now()) @map("created_at")
  user      User            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  article   Article         @relation(fields: [articleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, articleId, type])
  @@index([userId])
  @@index([articleId])
  @@map("interactions")
}

model LoyaltyPoint {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  points        Int
  action        String   @db.VarChar(100)
  referenceId   String?  @map("reference_id")
  referenceType String?  @map("reference_type")
  metadata      Json?
  createdAt     DateTime @default(now()) @map("created_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@map("loyalty_points")
}

model DeepAnalysis {
  id                 String   @id @default(uuid())
  articleId          String   @unique @map("article_id")
  aiSummary          String?  @map("ai_summary") @db.Text
  keyTopics          Json?    @map("key_topics")
  tags               Json?
  sentiment          String?
  readabilityScore   Decimal? @map("readability_score") @db.Decimal(5, 2)
  engagementScore    Int?     @map("engagement_score")
  suggestedHeadlines Json?    @map("suggested_headlines")
  relatedArticles    Json?    @map("related_articles")
  metadata           Json?
  analyzedAt         DateTime @default(now()) @map("analyzed_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  article            Article  @relation(fields: [articleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([articleId])
  @@map("deep_analyses")
}

model ArticleKeyword {
  id        String   @id @default(uuid())
  articleId String   @map("article_id")
  keywordId String   @map("keyword_id")
  createdAt DateTime @default(now()) @map("created_at")
  article   Article  @relation(fields: [articleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  keyword   Keyword  @relation(fields: [keywordId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([articleId, keywordId])
  @@index([articleId])
  @@index([keywordId])
  @@map("article_keywords")
}

model Message {
  id           String    @id @default(uuid())
  fromUserId   String?   @map("from_user_id")
  toUserId     String?   @map("to_user_id")
  email        String
  subject      String?   @db.VarChar(500)
  message      String    @db.Text
  status       String    @default("unread")
  repliedAt    DateTime? @map("replied_at")
  replyContent String?   @map("reply_content") @db.Text
  metadata     Json?
  createdAt    DateTime  @default(now()) @map("created_at")
  fromUser     User?     @relation("SentMessages", fields: [fromUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  toUser       User?     @relation("ReceivedMessages", fields: [toUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([status])
  @@index([fromUserId])
  @@index([toUserId])
  @@map("messages")
}

model ActivityLog {
  id         String   @id @default(uuid())
  userId     String?  @map("user_id")
  action     String
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  oldValue   Json?    @map("old_value")
  newValue   Json?    @map("new_value")
  metadata   Json?
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  user       User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([action])
  @@index([entityType, entityId])
  @@map("activity_logs")
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique @db.VarChar(100)
  slug        String?    @unique
  displayName String?    @map("display_name")
  description String?    @db.Text
  permissions Json?
  isSystem    Boolean    @default(false) @map("is_system")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  roleId    String    @map("role_id")
  grantedBy String?   @map("granted_by")
  grantedAt DateTime  @default(now()) @map("granted_at")
  expiresAt DateTime? @map("expires_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

model UserPreference {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  key       String
  value     Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, key])
  @@index([userId])
  @@map("user_preferences")
}

model Comment {
  id               String                 @id @default(uuid())
  articleId        String                 @map("article_id")
  userId           String?                @map("user_id")
  parentId         String?                @map("parent_id")
  content          String                 @db.Text
  status           String                 @default("pending")
  likes            Int                    @default(0)
  aiScore          Float?                 @map("ai_score")
  aiClassification String?                @map("ai_classification")
  aiAnalyzedAt     DateTime?              @map("ai_analyzed_at")
  metadata         Json?
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")
  article          Article                @relation(fields: [articleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             User?                  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent           Comment?               @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies          Comment[]              @relation("CommentReplies")
  reactions        CommentReaction[]
  reports          CommentReport[]
  aiAnalyses       AICommentAnalysis[]
  moderationLogs   CommentModerationLog[]

  @@index([articleId])
  @@index([userId])
  @@index([parentId])
  @@index([status])
  @@index([aiClassification])
  @@map("comments")
}

model AnalyticsData {
  id          String   @id @default(uuid())
  date        DateTime @db.Date
  metricName  String   @map("metric_name") @db.VarChar(100)
  metricValue Decimal  @map("metric_value") @db.Decimal(15, 2)
  dimensions  Json?
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")

  @@unique([date, metricName])
  @@index([date])
  @@index([metricName])
  @@map("analytics_data")
}

model SiteSettings {
  id        String   @id @default(uuid())
  section   String   @unique @db.VarChar(50)
  data      Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([section])
  @@map("site_settings")
}

model daily_doses {
  id          String             @id
  period      daily_doses_period
  title       String             @db.VarChar(500)
  subtitle    String             @db.VarChar(500)
  date        DateTime           @db.Date
  status      daily_doses_status @default(draft)
  publishedAt DateTime?
  views       Int                @default(0)
  metadata    Json?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime

  @@unique([date, period])
  @@index([date])
  @@index([period])
  @@index([status])
}

model dose_contents {
  id           String                    @id
  doseId       String
  articleId    String?
  contentType  dose_contents_contentType
  title        String                    @db.VarChar(500)
  summary      String                    @db.Text
  audioUrl     String?                   @db.Text
  imageUrl     String?                   @db.Text
  displayOrder Int                       @default(0)
  metadata     Json?
  createdAt    DateTime                  @default(now())

  @@index([articleId])
  @@index([doseId])
}

model CommentReaction {
  id        String   @id @default(uuid())
  commentId String   @map("comment_id")
  userId    String?  @map("user_id")
  reactionType String @map("reaction_type") @db.VarChar(20) // like, love, laugh, angry, sad
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  createdAt DateTime @default(now()) @map("created_at")
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([commentId, userId, reactionType])
  @@index([commentId])
  @@index([userId])
  @@map("comment_reactions")
}

model CommentReport {
  id         String   @id @default(uuid())
  commentId  String   @map("comment_id")
  userId     String?  @map("user_id")
  reporterId String?  @map("reporter_id") // Alias for userId
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  reason     String   @db.VarChar(100)
  details    String?  @db.Text
  status     String   @default("pending") @db.VarChar(20)
  resolvedAt DateTime? @map("resolved_at")
  resolvedBy String?  @map("resolved_by")
  createdAt  DateTime @default(now()) @map("created_at")
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([commentId])
  @@index([userId])
  @@index([reporterId])
  @@index([status])
  @@map("comment_reports")
}

model CommentModerationLog {
  id           String   @id @default(uuid())
  commentId    String   @map("comment_id")
  moderatorId  String   @map("moderator_id")
  action       String   @db.VarChar(50)
  reason       String?  @db.Text
  oldContent   String?  @map("old_content") @db.Text
  previousStatus String? @map("previous_status") @db.VarChar(20)
  newStatus    String?  @map("new_status") @db.VarChar(20)
  metadata     Json?
  createdAt    DateTime @default(now()) @map("created_at")
  comment      Comment  @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([commentId])
  @@index([moderatorId])
  @@map("comment_moderation_logs")
}

model AICommentAnalysis {
  id             String   @id @default(uuid())
  commentId      String   @map("comment_id")
  analysisType   String   @map("analysis_type") @default("content") @db.VarChar(50)
  score          Float
  classification String   @db.VarChar(50)
  confidence     Float
  suggestedAction String? @map("suggested_action") @db.VarChar(50)
  aiProvider     String   @map("ai_provider") @default("local") @db.VarChar(50)
  analysisDetails Json?   @map("analysis_details")
  flaggedWords   Json?    @map("flagged_words")
  categories     Json?
  processingTime Int      @default(0) @map("processing_time")
  details        Json?
  createdAt      DateTime @default(now()) @map("created_at")
  comment        Comment  @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([commentId])
  @@index([analysisType])
  @@map("ai_comment_analyses")
}

model AIModerationSettings {
  id                  String   @id @default(uuid())
  enabled             Boolean  @default(true)
  spamThreshold       Float    @default(0.8) @map("spam_threshold")
  toxicityThreshold   Float    @default(0.8) @map("toxicity_threshold")
  autoRejectThreshold Float    @default(0.95) @map("auto_reject_threshold")
  autoApproveThreshold Float   @default(0.1) @map("auto_approve_threshold")
  checkSpam           Boolean  @default(true) @map("check_spam")
  checkToxicity       Boolean  @default(true) @map("check_toxicity")
  checkRelevance      Boolean  @default(true) @map("check_relevance")
  apiKeyEncrypted     String?  @map("api_key_encrypted") @db.Text
  metadata            Json?
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("ai_moderation_settings")
}

model AIModerationLog {
  id           String   @id @default(uuid())
  entityType   String   @map("entity_type") @db.VarChar(50)
  entityId     String   @map("entity_id")
  action       String   @db.VarChar(50)
  scores       Json
  decision     String   @db.VarChar(50)
  aiDecision   String?  @map("ai_decision") @db.VarChar(50)
  humanDecision String? @map("human_decision") @db.VarChar(50)
  overridden   Boolean  @default(false)
  reason       String?  @db.Text
  metadata     Json?
  createdAt    DateTime @default(now()) @map("created_at")
  include      Json?    // For storing related data

  @@index([entityType, entityId])
  @@map("ai_moderation_logs")
}

model BannedWord {
  id        String   @id @default(uuid())
  word      String   @unique @db.VarChar(100)
  severity  String   @default("medium") @db.VarChar(20)
  action    String   @default("block") @db.VarChar(20) // block, replace, flag
  replacement String? @db.VarChar(100)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([word])
  @@map("banned_words")
}

model OpinionAuthor {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(200)
  slug         String   @unique @db.VarChar(200)
  email        String?  @db.VarChar(200)
  bio          String?  @db.Text
  avatar       String?  @db.Text
  title        String?  @db.VarChar(200)
  credentials  String?  @db.Text
  socialLinks  Json?    @map("social_links")
  isActive     Boolean  @default(true) @map("is_active")
  displayOrder Int      @default(0) @map("display_order")
  metadata     Json?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Virtual field for count
  articles     Json?    // Will be populated in queries

  @@index([slug])
  @@map("opinion_authors")
}

enum InteractionType {
  like
  save
  share
  comment
  view
}

enum daily_doses_period {
  morning
  afternoon
  evening
  night
}

enum dose_contents_contentType {
  article
  weather
  quote
  tip
  audio
  analysis
}

enum daily_doses_status {
  draft
  published
  scheduled
  archived
}
