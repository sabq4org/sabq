const { Client } = require('pg');

// ูุฑุงุกุฉ ุจูุงูุงุช ุงูุงุชุตุงู ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ุฃู .env.local
require('dotenv').config({ path: '.env.local' });

const client = new Client({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

console.log('๐ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุจูุงูุงุช PostgreSQL');
console.log('==================================================');

async function testConnection() {
  try {
    console.log('\n๐ก ูุญุงููุฉ ุงูุงุชุตุงู...');
    await client.connect();
    
    console.log('\nโ ุงูุงุชุตุงู ูุงุฌุญ!');
    
    // ูุนูููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
    const versionResult = await client.query('SELECT version()');
    console.log('\n๐ ูุนูููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
    console.log(versionResult.rows[0].version);
    
    // ุนุฑุถ ุงูุฌุฏุงูู
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log('\n๐ ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ:');
    if (tablesResult.rows.length > 0) {
      tablesResult.rows.forEach(row => {
        console.log(`  - ${row.table_name}`);
      });
    } else {
      console.log('  ูุง ุชูุฌุฏ ุฌุฏุงูู ุจุนุฏ');
    }
    
    await client.end();
  } catch (error) {
    console.error('\nโ ูุดู ุงูุงุชุตุงู!');
    console.error('ุงูุฎุทุฃ:', error.message);
    console.log('\nุชุฃูุฏ ูู:');
    console.log('1. ูุฌูุฏ DATABASE_URL ูู .env.local');
    console.log('2. ุงูุจูุงูุงุช ุตุญูุญุฉ');
    console.log('3. IP ุงูุฎุงุต ุจู ูุณููุญ ูู Trusted Sources');
    process.exit(1);
  }
}

testConnection(); 