const { Client } = require('pg');

// ูุฑุงุกุฉ ุจูุงูุงุช ุงูุงุชุตุงู ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ุฃู .env.local
require('dotenv').config({ path: '.env.local' });

// ุชุญููู connection string ูุฅุถุงูุฉ ุฅุนุฏุงุฏุงุช SSL
let connectionConfig = {
  connectionString: process.env.DATABASE_URL
};

// ุฅุถุงูุฉ ุฅุนุฏุงุฏุงุช SSL ููุชุทููุฑ
if (process.env.NODE_ENV !== 'production') {
  connectionConfig.ssl = {
    rejectUnauthorized: false
  };
}

const client = new Client(connectionConfig);

console.log('๐ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุจูุงูุงุช PostgreSQL');
console.log('==================================================');

async function testConnection() {
  try {
    console.log('\n๐ก ูุญุงููุฉ ุงูุงุชุตุงู...');
    await client.connect();
    
    console.log('\nโ ุงูุงุชุตุงู ูุงุฌุญ!');
    
    // ูุนูููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
    const versionResult = await client.query('SELECT version()');
    console.log('\n๐ ูุนูููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
    console.log(versionResult.rows[0].version);
    
    // ูุนูููุงุช ุงูุงุชุตุงู
    const connectionInfo = await client.query(`
      SELECT current_database() as database,
             current_user as user,
             inet_server_addr() as server_ip,
             inet_server_port() as server_port
    `);
    console.log('\n๐ ูุนูููุงุช ุงูุงุชุตุงู:');
    const info = connectionInfo.rows[0];
    console.log(`  - ูุงุนุฏุฉ ุงูุจูุงูุงุช: ${info.database}`);
    console.log(`  - ุงููุณุชุฎุฏู: ${info.user}`);
    console.log(`  - ุงูุฎุงุฏู: ${info.server_ip || 'remote'}:${info.server_port}`);
    
    // ุนุฑุถ ุงูุฌุฏุงูู
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log('\n๐ ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ:');
    if (tablesResult.rows.length > 0) {
      tablesResult.rows.forEach(row => {
        console.log(`  - ${row.table_name}`);
      });
      
      // ุนุฏ ุงูุณุฌูุงุช ูู ุงูุฌุฏุงูู ุงูุฑุฆูุณูุฉ
      console.log('\n๐ ุฅุญุตุงุฆูุงุช ุงูุจูุงูุงุช:');
      const mainTables = ['users', 'articles', 'categories', 'keywords'];
      
      for (const table of mainTables) {
        try {
          const countResult = await client.query(`SELECT COUNT(*) FROM ${table}`);
          console.log(`  - ${table}: ${countResult.rows[0].count} ุณุฌู`);
        } catch (e) {
          // ุชุฌุงูู ุงูุฌุฏุงูู ุบูุฑ ุงูููุฌูุฏุฉ
        }
      }
    } else {
      console.log('  ูุง ุชูุฌุฏ ุฌุฏุงูู ุจุนุฏ');
    }
    
    await client.end();
    console.log('\nโจ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ูุนูู ุจุดูู ููุชุงุฒ!');
    
  } catch (error) {
    console.error('\nโ ูุดู ุงูุงุชุตุงู!');
    console.error('ุงูุฎุทุฃ:', error.message);
    console.log('\nุชุฃูุฏ ูู:');
    console.log('1. ูุฌูุฏ DATABASE_URL ูู .env.local');
    console.log('2. ุงูุจูุงูุงุช ุตุญูุญุฉ');
    console.log('3. IP ุงูุฎุงุต ุจู ูุณููุญ ูู Trusted Sources');
    
    if (error.message.includes('certificate')) {
      console.log('\n๐ก ูุญู ูุดููุฉ ุงูุดูุงุฏุฉุ ุชุฃูุฏ ูู ุฃู DATABASE_URL ูุญุชูู ุนูู:');
      console.log('   ?sslmode=require ูู ููุงูุฉ ุงูุฑุงุจุท');
    }
    
    process.exit(1);
  }
}

testConnection(); 