const { PrismaClient } = require('../lib/generated/prisma');
require('dotenv').config();

async function testConnection() {
  console.log('๐ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุจูุงูุงุช PlanetScale...');
  console.log('DATABASE_URL:', process.env.DATABASE_URL ? 'โ ููุฌูุฏ' : 'โ ุบูุฑ ููุฌูุฏ');
  
  if (!process.env.DATABASE_URL) {
    console.error('โ DATABASE_URL ุบูุฑ ููุฌูุฏ ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ');
    return;
  }
  
  const prisma = new PrismaClient({
    log: ['query', 'error', 'warn'],
    datasources: {
      db: {
        url: process.env.DATABASE_URL
      }
    }
  });

  try {
    // ุงุฎุชุจุงุฑ ุงูุงุชุตุงู
    console.log('\n๐ ุฌูุจ ุนุฏุฏ ุงูููุงูุงุช...');
    const count = await prisma.articles.count();
    console.log(`โ ุนุฏุฏ ุงูููุงูุงุช: ${count}`);
    
    // ุฌูุจ ุฃูู 3 ููุงูุงุช
    console.log('\n๐ฐ ุฌูุจ ุฃูู 3 ููุงูุงุช...');
    const articles = await prisma.articles.findMany({
      take: 3,
      where: {
        status: 'published'
      },
      select: {
        id: true,
        title: true,
        status: true,
        created_at: true
      }
    });
    
    console.log(`โ ุชู ุฌูุจ ${articles.length} ููุงู:`);
    articles.forEach((article, index) => {
      console.log(`${index + 1}. ${article.title} (${article.status})`);
    });
    
    // ุงุฎุชุจุงุฑ ุงูุชุตูููุงุช
    console.log('\n๐ ุฌูุจ ุงูุชุตูููุงุช...');
    const categories = await prisma.categories.count();
    console.log(`โ ุนุฏุฏ ุงูุชุตูููุงุช: ${categories}`);
    
  } catch (error) {
    console.error('\nโ ุฎุทุฃ ูู ุงูุงุชุตุงู:', error.message);
    if (error.code) {
      console.error('ููุฏ ุงูุฎุทุฃ:', error.code);
    }
  } finally {
    await prisma.$disconnect();
    console.log('\n๐ ุชู ูุทุน ุงูุงุชุตุงู');
  }
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ
testConnection(); 