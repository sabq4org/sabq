// ุงุฎุชุจุงุฑ ุจุณูุท ููุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
require('dotenv').config({ path: '.env.local' });

async function testConnection() {
  console.log('๐ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช PostgreSQL');
  console.log('==========================================');
  
  // ุงูุชุญูู ูู ูุฌูุฏ DATABASE_URL
  if (!process.env.DATABASE_URL) {
    console.error('โ ุฎุทุฃ: DATABASE_URL ุบูุฑ ููุฌูุฏ ูู .env.local');
    return;
  }
  
  console.log('\n๐ก ูุญุงููุฉ ุงูุงุชุตุงู...');
  
  try {
    // ุงุณุชุฎุฏุงู Prisma ููุงุชุตุงู
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient({
      datasources: {
        db: {
          url: process.env.DATABASE_URL
        }
      }
    });
    
    // ุงุฎุชุจุงุฑ ุจุณูุท - ุนุฏ ุงููุณุชุฎุฏููู
    const userCount = await prisma.user.count();
    console.log(`\nโ ุงูุงุชุตุงู ูุงุฌุญ!`);
    console.log(`๐ ุนุฏุฏ ุงููุณุชุฎุฏููู: ${userCount}`);
    
    // ุนุฏ ุงูุชุตูููุงุช
    const categoryCount = await prisma.category.count();
    console.log(`๐ ุนุฏุฏ ุงูุชุตูููุงุช: ${categoryCount}`);
    
    // ุนุฏ ุงูููุงูุงุช
    const articleCount = await prisma.article.count();
    console.log(`๐ ุนุฏุฏ ุงูููุงูุงุช: ${articleCount}`);
    
    await prisma.$disconnect();
    console.log('\nโจ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุชุนูู ุจุดูู ููุชุงุฒ!');
    
  } catch (error) {
    console.error('\nโ ูุดู ุงูุงุชุตุงู!');
    console.error('ุงูุฎุทุฃ:', error.message);
    
    // ูุญุงููุฉ ุจุฏููุฉ ูุน pg ูุจุงุดุฑุฉ
    console.log('\n๐ ูุญุงููุฉ ุจุฏููุฉ...');
    
    const { Client } = require('pg');
    const connectionString = process.env.DATABASE_URL.replace('sslmode=require', 'sslmode=no-verify');
    
    const client = new Client({
      connectionString,
      ssl: {
        rejectUnauthorized: false
      }
    });
    
    try {
      await client.connect();
      const result = await client.query('SELECT NOW()');
      console.log('โ ุงูุงุชุตุงู ุงูุจุฏูู ูุงุฌุญ!');
      console.log('โฐ ููุช ุงูุฎุงุฏู:', result.rows[0].now);
      await client.end();
      
      console.log('\n๐ก ุชูููุญ: ูุฏ ุชุญุชุงุฌ ูุชุญุฏูุซ DATABASE_URL ูู .env.local');
      console.log('   ุงุณุชุจุฏู sslmode=require ุจู sslmode=no-verify');
      
    } catch (altError) {
      console.error('โ ูุดู ุงูุงุชุตุงู ุงูุจุฏูู ุฃูุถุงู:', altError.message);
      console.log('\n๐ ุชุฃูุฏ ูู:');
      console.log('1. IP ุงูุฎุงุต ุจู (176.45.56.154) ูุถุงู ูู Trusted Sources');
      console.log('2. ูุงุนุฏุฉ ุงูุจูุงูุงุช ุชุนูู ูู DigitalOcean');
      console.log('3. ูููุฉ ุงููุฑูุฑ ุตุญูุญุฉ');
    }
  }
}

testConnection();
