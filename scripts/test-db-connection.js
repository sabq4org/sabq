#!/usr/bin/env node

/**
 * ุณูุฑูุจุช ุงุฎุชุจุงุฑ ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช
 * ูุชุญูู ูู Connection Pooling ููุนุฑุถ ูุนูููุงุช ูููุฏุฉ
 */

require('dotenv').config();
const { PrismaClient } = require('../lib/generated/prisma');

// ุฃููุงู ููู console
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

async function testConnection() {
  console.log(`${colors.cyan}๐ ุจุฏุก ุงุฎุชุจุงุฑ ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช...${colors.reset}\n`);

  // ุนุฑุถ ูุนูููุงุช ุงูุจูุฆุฉ
  console.log(`${colors.blue}๐ ูุนูููุงุช ุงูุจูุฆุฉ:${colors.reset}`);
  console.log(`- NODE_ENV: ${process.env.NODE_ENV || 'development'}`);
  console.log(`- DATABASE_URL: ${process.env.DATABASE_URL ? 'โ ููุฌูุฏ' : 'โ ุบูุฑ ููุฌูุฏ'}`);
  console.log(`- DIRECT_URL: ${process.env.DIRECT_URL ? 'โ ููุฌูุฏ' : 'โ ุบูุฑ ููุฌูุฏ'}`);
  
  if (process.env.DATABASE_URL) {
    const url = new URL(process.env.DATABASE_URL);
    console.log(`- Host: ${url.hostname}`);
    console.log(`- Port: ${url.port}`);
    console.log(`- Database: ${url.pathname.slice(1)}`);
    console.log(`- Connection Pooling: ${url.port === '6543' ? 'โ ููุนูู (pgBouncer)' : 'โ ุงุชุตุงู ูุจุงุดุฑ'}`);
  }
  console.log('');

  const prisma = new PrismaClient({
    log: ['error', 'warn'],
  });

  try {
    // ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุงูุฃุณุงุณู
    console.log(`${colors.yellow}๐ ูุญุงููุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...${colors.reset}`);
    const startTime = Date.now();
    
    await prisma.$connect();
    
    const connectionTime = Date.now() - startTime;
    console.log(`${colors.green}โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ ูู ${connectionTime}ms${colors.reset}\n`);

    // ุงุฎุชุจุงุฑ query ุจุณูุท
    console.log(`${colors.yellow}๐ ุฌูุน ุฅุญุตุงุฆูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช...${colors.reset}`);
    
    const [
      usersCount,
      articlesCount,
      categoriesCount,
      commentsCount
    ] = await Promise.all([
      prisma.users.count(),
      prisma.articles.count(),
      prisma.categories.count(),
      prisma.comments.count()
    ]);

    console.log(`${colors.green}๐ ุงูุฅุญุตุงุฆูุงุช:${colors.reset}`);
    console.log(`- ุนุฏุฏ ุงููุณุชุฎุฏููู: ${usersCount}`);
    console.log(`- ุนุฏุฏ ุงูููุงูุงุช: ${articlesCount}`);
    console.log(`- ุนุฏุฏ ุงููุฆุงุช: ${categoriesCount}`);
    console.log(`- ุนุฏุฏ ุงูุชุนูููุงุช: ${commentsCount}\n`);

    // ุงุฎุชุจุงุฑ ุฃุฏุงุก Query
    console.log(`${colors.yellow}โก ุงุฎุชุจุงุฑ ุฃุฏุงุก ุงูุงุณุชุนูุงูุงุช...${colors.reset}`);
    
    const queries = [
      { name: 'ุฌูุจ ุขุฎุฑ 10 ููุงูุงุช', fn: () => prisma.articles.findMany({ take: 10, orderBy: { created_at: 'desc' } }) },
      { name: 'ุฌูุจ ุงููุฆุงุช ุงููุดุทุฉ', fn: () => prisma.categories.findMany({ where: { is_active: true } }) },
      { name: 'ุนุฏ ุงููุณุชุฎุฏููู ุงููุคูุฏูู', fn: () => prisma.users.count({ where: { is_verified: true } }) }
    ];

    for (const query of queries) {
      const start = Date.now();
      await query.fn();
      const time = Date.now() - start;
      console.log(`- ${query.name}: ${time}ms`);
    }

    // ุงุฎุชุจุงุฑ Connection Pool
    console.log(`\n${colors.yellow}๐ ุงุฎุชุจุงุฑ Connection Pool...${colors.reset}`);
    
    const concurrentQueries = 10;
    const start = Date.now();
    
    await Promise.all(
      Array(concurrentQueries).fill(null).map((_, i) => 
        prisma.articles.count().then(() => {
          console.log(`  - Query ${i + 1} โ`);
        })
      )
    );
    
    const totalTime = Date.now() - start;
    console.log(`${colors.green}โ ุชู ุชูููุฐ ${concurrentQueries} ุงุณุชุนูุงูุงุช ูุชุฒุงููุฉ ูู ${totalTime}ms${colors.reset}`);
    console.log(`- ูุชูุณุท ุงูููุช ููู ุงุณุชุนูุงู: ${Math.round(totalTime / concurrentQueries)}ms\n`);

    // ุงููุชูุฌุฉ ุงูููุงุฆูุฉ
    console.log(`${colors.green}๐ ูุฌุญุช ุฌููุน ุงูุงุฎุชุจุงุฑุงุช!${colors.reset}`);
    console.log(`${colors.cyan}โจ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุชุนูู ุจุดูู ููุชุงุฒ ูุน Connection Pooling${colors.reset}`);

  } catch (error) {
    console.error(`${colors.red}โ ูุดู ุงูุงุฎุชุจุงุฑ:${colors.reset}`);
    console.error(error);
    
    // ูุตุงุฆุญ ูุญู ุงููุดุงูู
    console.log(`\n${colors.yellow}๐ก ูุตุงุฆุญ ูุญู ุงููุดููุฉ:${colors.reset}`);
    
    if (error.code === 'P1001') {
      console.log('- ุชุญูู ูู ุฃู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุชุนูู');
      console.log('- ุชุญูู ูู ุตุญุฉ DATABASE_URL');
      console.log('- ุชุญูู ูู ุฅุนุฏุงุฏุงุช ุงูุดุจูุฉ ูุงูุฌุฏุงุฑ ุงููุงุฑู');
    } else if (error.code === 'P1002') {
      console.log('- ุชุญูู ูู ุฃู ุงูุฎุงุฏู ููุจู ุงูุงุชุตุงูุงุช');
      console.log('- ุชุญูู ูู timeout settings');
    } else if (error.code === 'P1003') {
      console.log('- ุชุญูู ูู ุฃู ูุงุนุฏุฉ ุงูุจูุงูุงุช ููุฌูุฏุฉ');
      console.log('- ุชุญูู ูู ุตุญุฉ ุงุณู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูู DATABASE_URL');
    }
    
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ
testConnection().catch(console.error);
